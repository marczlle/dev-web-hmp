[
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "DAO",
        "importPath": "DAO",
        "description": "DAO",
        "isExtraImport": true,
        "detail": "DAO",
        "documentation": {}
    },
    {
        "label": "Models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "Models",
        "description": "Models",
        "detail": "Models",
        "documentation": {}
    },
    {
        "label": "Alimento",
        "importPath": "Models",
        "description": "Models",
        "isExtraImport": true,
        "detail": "Models",
        "documentation": {}
    },
    {
        "label": "Nutriente",
        "importPath": "Models",
        "description": "Models",
        "isExtraImport": true,
        "detail": "Models",
        "documentation": {}
    },
    {
        "label": "AlimentoNutriente",
        "importPath": "Models",
        "description": "Models",
        "isExtraImport": true,
        "detail": "Models",
        "documentation": {}
    },
    {
        "label": "Alimento",
        "importPath": "Models",
        "description": "Models",
        "isExtraImport": true,
        "detail": "Models",
        "documentation": {}
    },
    {
        "label": "Nutriente",
        "importPath": "Models",
        "description": "Models",
        "isExtraImport": true,
        "detail": "Models",
        "documentation": {}
    },
    {
        "label": "AlimentoNutriente",
        "importPath": "Models",
        "description": "Models",
        "isExtraImport": true,
        "detail": "Models",
        "documentation": {}
    },
    {
        "label": "Categoria_Alimento",
        "importPath": "Models",
        "description": "Models",
        "isExtraImport": true,
        "detail": "Models",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "DB",
        "description": "DB",
        "isExtraImport": true,
        "detail": "DB",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "DB",
        "description": "DB",
        "isExtraImport": true,
        "detail": "DB",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "DB",
        "description": "DB",
        "isExtraImport": true,
        "detail": "DB",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "DB",
        "description": "DB",
        "isExtraImport": true,
        "detail": "DB",
        "documentation": {}
    },
    {
        "label": "Engine",
        "importPath": "DB",
        "description": "DB",
        "isExtraImport": true,
        "detail": "DB",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "DB",
        "description": "DB",
        "isExtraImport": true,
        "detail": "DB",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "DB",
        "description": "DB",
        "isExtraImport": true,
        "detail": "DB",
        "documentation": {}
    },
    {
        "label": "typing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "typing",
        "description": "typing",
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "URL",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "contextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def index():\n    return \"API do NutriApp funcionando! üçé\"\n# Buscar alimentos por categoria (GET)\n@app.route(\"/alimentos/categoria/<categoria>\", methods=[\"GET\"])\ndef get_alimentos_por_categoria(categoria):\n    try:\n        resultados = dao.buscar_por_categoria(categoria)\n        alimentos = [\n            {\n                \"id_alimento\": row[0],",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "get_alimentos_por_categoria",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def get_alimentos_por_categoria(categoria):\n    try:\n        resultados = dao.buscar_por_categoria(categoria)\n        alimentos = [\n            {\n                \"id_alimento\": row[0],\n                \"nome_alimento\": row[1],\n                \"unidade_padrao\": row[2],\n                \"calorias\": row[3],\n            }",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "adicionar_alimento",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def adicionar_alimento():\n    dados = request.get_json()\n    novo_alimento = Alimento(\n        nome_alimento=dados[\"nome_alimento\"],\n        unidade_padrao=dados[\"unidade_padrao\"],\n        calorias=dados[\"calorias\"],\n        id_categoria=dados[\"id_categoria\"]\n    )\n    try:\n        resultado = dao.adicionar_entidade(novo_alimento)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "get_alimento",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def get_alimento(id_alimento):\n    try:\n        alimento = dao.obter_por_id(Alimento, id_alimento)\n        return jsonify({\n            \"id_alimento\": alimento.id_alimento,\n            \"nome_alimento\": alimento.nome_alimento,\n            \"unidade_padrao\": alimento.unidade_padrao,\n            \"calorias\": alimento.calorias,\n            \"id_categoria\": alimento.id_categoria\n        })",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "deletar_alimento",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def deletar_alimento(id_alimento):\n    try:\n        sucesso = dao.remover_por_id(Alimento, id_alimento)\n        if sucesso:\n            return jsonify({\"mensagem\": \"Alimento deletado com sucesso!\"})\n        return jsonify({\"mensagem\": \"Alimento n√£o encontrado.\"}), 404\n    except Exception as e:\n        return jsonify({\"erro\": str(e)}), 500\n# Obter todos os alimentos da tabela    \n@app.route(\"/alimentos\", methods=[\"GET\"])",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "get_todos_alimentos",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def get_todos_alimentos():\n    try:\n        with get_session() as session:\n            alimentos = session.query(Alimento).all()\n            lista = [\n                {\n                    \"id_alimento\": a.id_alimento,\n                    \"nome_alimento\": a.nome_alimento,\n                    \"unidade_padrao\": a.unidade_padrao,\n                    \"calorias\": a.calorias,",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "get_alimento_por_nome",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def get_alimento_por_nome(nome_alimento):\n    try:\n        with get_session() as session:\n            alimento = session.query(Alimento).filter(Alimento.nome_alimento == nome_alimento).first()\n            if alimento:\n                return jsonify({\n                    \"id_alimento\": alimento.id_alimento,\n                    \"nome_alimento\": alimento.nome_alimento,\n                    \"unidade_padrao\": alimento.unidade_padrao,\n                    \"calorias\": alimento.calorias,",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "get_nutrientes_por_alimento",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def get_nutrientes_por_alimento(nome_alimento):\n    try:\n        with get_session() as session:\n            # 1. Buscar alimento pelo nome\n            alimento = session.query(Alimento).filter(Alimento.nome_alimento == nome_alimento).first()\n            if not alimento:\n                return jsonify({\"erro\": \"Alimento n√£o encontrado.\"}), 404\n            # 2. Buscar os nutrientes relacionados ao alimento\n            nutrientes = (\n                session.query(AlimentoNutriente, Nutriente)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = Flask(__name__)\nCORS(app)  # Libera o acesso ao front-end\ndao = DAO()\n# =================== Rotas =====================\n@app.route(\"/\")\ndef index():\n    return \"API do NutriApp funcionando! üçé\"\n# Buscar alimentos por categoria (GET)\n@app.route(\"/alimentos/categoria/<categoria>\", methods=[\"GET\"])\ndef get_alimentos_por_categoria(categoria):",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "dao",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "dao = DAO()\n# =================== Rotas =====================\n@app.route(\"/\")\ndef index():\n    return \"API do NutriApp funcionando! üçé\"\n# Buscar alimentos por categoria (GET)\n@app.route(\"/alimentos/categoria/<categoria>\", methods=[\"GET\"])\ndef get_alimentos_por_categoria(categoria):\n    try:\n        resultados = dao.buscar_por_categoria(categoria)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "DAO",
        "kind": 6,
        "importPath": "DAO",
        "description": "DAO",
        "peekOfCode": "class DAO:\n    def __init__(self, session_factory=get_session): # Acredite se quiser, isso √© um construtor\n        self.session_factory = session_factory\n    # Stored Procedures ----------------------------------------------------------------------------\n    def calcular_total_nutrientes(self, id_refeicao: int): # Procedure 1\n        with self.session_factory() as session:\n            query = text(\"\"\"\n                SELECT \n                    an.id_nutriente,\n                    SUM((ra.quantidade / 100.0) * an.quantidade_por_100un) AS total_nutriente",
        "detail": "DAO",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "DAO",
        "description": "DAO",
        "peekOfCode": "T = TypeVar('T', bound=Base)\nclass DAO:\n    def __init__(self, session_factory=get_session): # Acredite se quiser, isso √© um construtor\n        self.session_factory = session_factory\n    # Stored Procedures ----------------------------------------------------------------------------\n    def calcular_total_nutrientes(self, id_refeicao: int): # Procedure 1\n        with self.session_factory() as session:\n            query = text(\"\"\"\n                SELECT \n                    an.id_nutriente,",
        "detail": "DAO",
        "documentation": {}
    },
    {
        "label": "get_session",
        "kind": 2,
        "importPath": "DB",
        "description": "DB",
        "peekOfCode": "def get_session() -> typing.Generator[SQLAlchemySession, None, None]:\n    db: SQLAlchemySession = Session()\n    try:\n        yield db\n    except Exception:\n        db.rollback()\n        raise\n    finally:\n        db.close()\nif __name__ == \"__main__\":",
        "detail": "DB",
        "documentation": {}
    },
    {
        "label": "Engine",
        "kind": 5,
        "importPath": "DB",
        "description": "DB",
        "peekOfCode": "Engine = create_engine(\"sqlite:///data.db\",echo=True)\n# echo=True pra mostrar os logs de SQL gerados\nBase = declarative_base()\nSession = sessionmaker(bind=Engine, autoflush=False, autocommit=False)\n@contextmanager\ndef get_session() -> typing.Generator[SQLAlchemySession, None, None]:\n    db: SQLAlchemySession = Session()\n    try:\n        yield db\n    except Exception:",
        "detail": "DB",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "DB",
        "description": "DB",
        "peekOfCode": "Base = declarative_base()\nSession = sessionmaker(bind=Engine, autoflush=False, autocommit=False)\n@contextmanager\ndef get_session() -> typing.Generator[SQLAlchemySession, None, None]:\n    db: SQLAlchemySession = Session()\n    try:\n        yield db\n    except Exception:\n        db.rollback()\n        raise",
        "detail": "DB",
        "documentation": {}
    },
    {
        "label": "Session",
        "kind": 5,
        "importPath": "DB",
        "description": "DB",
        "peekOfCode": "Session = sessionmaker(bind=Engine, autoflush=False, autocommit=False)\n@contextmanager\ndef get_session() -> typing.Generator[SQLAlchemySession, None, None]:\n    db: SQLAlchemySession = Session()\n    try:\n        yield db\n    except Exception:\n        db.rollback()\n        raise\n    finally:",
        "detail": "DB",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "Main",
        "description": "Main",
        "peekOfCode": "engine = create_engine('sqlite:///data.db')\nBase.metadata.create_all(engine)\nSession = sessionmaker(bind=engine)\nsession = Session()\n# Categoria gen√©rica\ncategoria = Categoria_Alimento(nome_categoria=\"Comida\", descricao=\"Alimentos diversos\")\nsession.add(categoria)\nsession.commit()\n# Nutrientes\nnutrientes = {",
        "detail": "Main",
        "documentation": {}
    },
    {
        "label": "Session",
        "kind": 5,
        "importPath": "Main",
        "description": "Main",
        "peekOfCode": "Session = sessionmaker(bind=engine)\nsession = Session()\n# Categoria gen√©rica\ncategoria = Categoria_Alimento(nome_categoria=\"Comida\", descricao=\"Alimentos diversos\")\nsession.add(categoria)\nsession.commit()\n# Nutrientes\nnutrientes = {\n    \"Gordura\": Nutriente(nome_nutriente=\"Gordura\", unidade_medida=\"g\"),\n    \"Fibra\": Nutriente(nome_nutriente=\"Fibra\", unidade_medida=\"g\"),",
        "detail": "Main",
        "documentation": {}
    },
    {
        "label": "session",
        "kind": 5,
        "importPath": "Main",
        "description": "Main",
        "peekOfCode": "session = Session()\n# Categoria gen√©rica\ncategoria = Categoria_Alimento(nome_categoria=\"Comida\", descricao=\"Alimentos diversos\")\nsession.add(categoria)\nsession.commit()\n# Nutrientes\nnutrientes = {\n    \"Gordura\": Nutriente(nome_nutriente=\"Gordura\", unidade_medida=\"g\"),\n    \"Fibra\": Nutriente(nome_nutriente=\"Fibra\", unidade_medida=\"g\"),\n    \"Prote√≠na\": Nutriente(nome_nutriente=\"Prote√≠na\", unidade_medida=\"g\"),",
        "detail": "Main",
        "documentation": {}
    },
    {
        "label": "categoria",
        "kind": 5,
        "importPath": "Main",
        "description": "Main",
        "peekOfCode": "categoria = Categoria_Alimento(nome_categoria=\"Comida\", descricao=\"Alimentos diversos\")\nsession.add(categoria)\nsession.commit()\n# Nutrientes\nnutrientes = {\n    \"Gordura\": Nutriente(nome_nutriente=\"Gordura\", unidade_medida=\"g\"),\n    \"Fibra\": Nutriente(nome_nutriente=\"Fibra\", unidade_medida=\"g\"),\n    \"Prote√≠na\": Nutriente(nome_nutriente=\"Prote√≠na\", unidade_medida=\"g\"),\n    \"Carboidrato\": Nutriente(nome_nutriente=\"Carboidrato\", unidade_medida=\"g\"),\n}",
        "detail": "Main",
        "documentation": {}
    },
    {
        "label": "nutrientes",
        "kind": 5,
        "importPath": "Main",
        "description": "Main",
        "peekOfCode": "nutrientes = {\n    \"Gordura\": Nutriente(nome_nutriente=\"Gordura\", unidade_medida=\"g\"),\n    \"Fibra\": Nutriente(nome_nutriente=\"Fibra\", unidade_medida=\"g\"),\n    \"Prote√≠na\": Nutriente(nome_nutriente=\"Prote√≠na\", unidade_medida=\"g\"),\n    \"Carboidrato\": Nutriente(nome_nutriente=\"Carboidrato\", unidade_medida=\"g\"),\n}\nsession.add_all(nutrientes.values())\nsession.commit()\n# Alimentos com unidades realistas e nutrientes por por√ß√£o\nalimentos_data = [",
        "detail": "Main",
        "documentation": {}
    },
    {
        "label": "alimentos_data",
        "kind": 5,
        "importPath": "Main",
        "description": "Main",
        "peekOfCode": "alimentos_data = [\n    (\"Frango Grelhado\", 165, \"100g\", {\"Prote√≠na\": 31, \"Gordura\": 3.6, \"Carboidrato\": 0, \"Fibra\": 0}),\n    (\"Arroz Integral\", 111, \"1 x√≠cara\", {\"Prote√≠na\": 2.6, \"Gordura\": 0.9, \"Carboidrato\": 23, \"Fibra\": 1.8}),\n    (\"Feij√£o Preto\", 132, \"1 concha\", {\"Prote√≠na\": 8.9, \"Gordura\": 0.5, \"Carboidrato\": 23.7, \"Fibra\": 8.7}),\n    (\"Ma√ß√£\", 52, \"1 un\", {\"Prote√≠na\": 0.3, \"Gordura\": 0.2, \"Carboidrato\": 14, \"Fibra\": 2.4}),\n    (\"Ovo Cozido\", 78, \"1 un\", {\"Prote√≠na\": 6.3, \"Gordura\": 5.3, \"Carboidrato\": 0.6, \"Fibra\": 0}),\n    (\"P√£o Integral\", 69, \"1 fatia\", {\"Prote√≠na\": 3.6, \"Gordura\": 1.1, \"Carboidrato\": 11.6, \"Fibra\": 1.9}),\n    (\"Iogurte Natural\", 61, \"1 copo (100ml)\", {\"Prote√≠na\": 3.5, \"Gordura\": 3.3, \"Carboidrato\": 4.7, \"Fibra\": 0}),\n    (\"Salm√£o\", 208, \"100g\", {\"Prote√≠na\": 20, \"Gordura\": 13, \"Carboidrato\": 0, \"Fibra\": 0}),\n    (\"Banana\", 89, \"1 un\", {\"Prote√≠na\": 1.1, \"Gordura\": 0.3, \"Carboidrato\": 23, \"Fibra\": 2.6}),",
        "detail": "Main",
        "documentation": {}
    },
    {
        "label": "criar_tabelas",
        "kind": 2,
        "importPath": "ManageDB",
        "description": "ManageDB",
        "peekOfCode": "def criar_tabelas():\n    # Se alguma tabela n√£o existir, ela ser√° criada.\n    # Se j√° existir, n√£o ser√° criada novamente.\n    with Engine.connect() as connection: \n        # Estabelece uma conex√£o, dessa forma garante que ela seja fechada ap√≥s o uso.\n        try:\n            Base.metadata.create_all(connection)\n            connection.commit()\n            # Realiza a opera√ß√£o.\n        except Exception as e:",
        "detail": "ManageDB",
        "documentation": {}
    },
    {
        "label": "apagar_tabelas",
        "kind": 2,
        "importPath": "ManageDB",
        "description": "ManageDB",
        "peekOfCode": "def apagar_tabelas():\n    # Apaga todas as tabelas do banco de dados.\n    with Engine.connect() as connection:\n        try:\n            Base.metadata.drop_all(connection)\n            connection.commit()\n            # Realiza a opera√ß√£o.\n        except Exception as e:\n            print(f'‚ùå Erro ao dropar tabelas: {e}')\n            raise",
        "detail": "ManageDB",
        "documentation": {}
    },
    {
        "label": "mostrar_menu",
        "kind": 2,
        "importPath": "ManageDB",
        "description": "ManageDB",
        "peekOfCode": "def mostrar_menu():\n    # Mostra o menu de op√ß√µes para o usu√°rio.\n    print('-=-' * 20)\n    print('Choose an option:')\n    print('1 - Create Tables')\n    print('2 - Drop Tables')\n    print('3 - Exit')\n    print('-=-' * 20)\nif __name__ == \"__main__\":\n    # Interface no Terminal para Desenvolvimento.",
        "detail": "ManageDB",
        "documentation": {}
    },
    {
        "label": "AlimentoNutriente",
        "kind": 6,
        "importPath": "Models",
        "description": "Models",
        "peekOfCode": "class AlimentoNutriente(Base):\n    __tablename__ = 'alimento_nutriente'\n    id_alimento = Column(Integer, ForeignKey('alimento.id_alimento'), primary_key=True)\n    id_nutriente = Column(Integer, ForeignKey('nutriente.id_nutriente'), primary_key=True)\n    quantidade_por_100un = Column(Integer, nullable=False)\n    alimento = relationship(\"Alimento\", back_populates=\"alimento_nutrientes\")\n    nutriente = relationship(\"Nutriente\", back_populates=\"alimento_nutrientes\")\nclass RefeicaoAlimento(Base):\n    __tablename__ = 'refeicao_alimento'\n    id_refeicao = Column(Integer, ForeignKey('refeicao.id_refeicao'), primary_key=True)",
        "detail": "Models",
        "documentation": {}
    },
    {
        "label": "RefeicaoAlimento",
        "kind": 6,
        "importPath": "Models",
        "description": "Models",
        "peekOfCode": "class RefeicaoAlimento(Base):\n    __tablename__ = 'refeicao_alimento'\n    id_refeicao = Column(Integer, ForeignKey('refeicao.id_refeicao'), primary_key=True)\n    id_alimento = Column(Integer, ForeignKey('alimento.id_alimento'), primary_key=True)\n    quantidade = Column(Integer, nullable=False)\n    refeicao = relationship(\"Refeicao\", back_populates=\"refeicao_alimento\")\n    alimento = relationship(\"Alimento\", back_populates=\"refeicao_alimento\")\nclass UsuarioRefeicao(Base):\n    __tablename__ = 'usuario_refeicao'\n    id_usuario = Column(Integer, ForeignKey('usuario.id_usuario'), primary_key=True)",
        "detail": "Models",
        "documentation": {}
    },
    {
        "label": "UsuarioRefeicao",
        "kind": 6,
        "importPath": "Models",
        "description": "Models",
        "peekOfCode": "class UsuarioRefeicao(Base):\n    __tablename__ = 'usuario_refeicao'\n    id_usuario = Column(Integer, ForeignKey('usuario.id_usuario'), primary_key=True)\n    id_refeicao = Column(Integer, ForeignKey('refeicao.id_refeicao'), primary_key=True)\n    usuario = relationship(\"Usuario\", back_populates=\"usuario_refeicao\")\n    refeicao = relationship(\"Refeicao\", back_populates=\"usuario_refeicao\")\nclass Usuario(Base):\n    __tablename__ = 'usuario'\n    id_usuario = Column(Integer, primary_key=True, autoincrement=True)\n    nome = Column(String(50), nullable=False)",
        "detail": "Models",
        "documentation": {}
    },
    {
        "label": "Usuario",
        "kind": 6,
        "importPath": "Models",
        "description": "Models",
        "peekOfCode": "class Usuario(Base):\n    __tablename__ = 'usuario'\n    id_usuario = Column(Integer, primary_key=True, autoincrement=True)\n    nome = Column(String(50), nullable=False)\n    email = Column(String(100), nullable=False, unique=True)\n    senha = Column(String(100), nullable=False)\n    genero = Column(String(10), nullable=False)\n    altura = Column(Integer, nullable=False)\n    peso = Column(Integer, nullable=False)\n    usuario_refeicao = relationship(\"UsuarioRefeicao\", back_populates=\"usuario\")",
        "detail": "Models",
        "documentation": {}
    },
    {
        "label": "Refeicao",
        "kind": 6,
        "importPath": "Models",
        "description": "Models",
        "peekOfCode": "class Refeicao(Base):\n    __tablename__ = 'refeicao'\n    id_refeicao = Column(Integer, primary_key=True, autoincrement=True)\n    nome_refeicao = Column(String(100), nullable=False)\n    descricao = Column(Integer, nullable=False)\n    usuario_refeicao = relationship(\"UsuarioRefeicao\", back_populates=\"refeicao\")\n    refeicao_alimento = relationship(\"RefeicaoAlimento\", back_populates=\"refeicao\")\nclass Alimento(Base):\n    __tablename__ = 'alimento'\n    id_alimento = Column(Integer, primary_key=True, autoincrement=True)",
        "detail": "Models",
        "documentation": {}
    },
    {
        "label": "Alimento",
        "kind": 6,
        "importPath": "Models",
        "description": "Models",
        "peekOfCode": "class Alimento(Base):\n    __tablename__ = 'alimento'\n    id_alimento = Column(Integer, primary_key=True, autoincrement=True)\n    nome_alimento = Column(String(100), nullable=False)\n    unidade_padrao = Column(String(50), nullable=False)\n    calorias = Column(Integer, nullable=False)\n    id_categoria = Column(Integer, ForeignKey('categoria_alimento.id_categoria'), nullable=False)\n    alimento_nutrientes = relationship(\"AlimentoNutriente\", back_populates=\"alimento\")\n    refeicao_alimento = relationship(\"RefeicaoAlimento\", back_populates=\"alimento\")\n    categoria = relationship(\"Categoria_Alimento\", back_populates=\"alimento\")",
        "detail": "Models",
        "documentation": {}
    },
    {
        "label": "Nutriente",
        "kind": 6,
        "importPath": "Models",
        "description": "Models",
        "peekOfCode": "class Nutriente(Base):\n    __tablename__ = 'nutriente'\n    id_nutriente = Column(Integer, primary_key=True, autoincrement=True)\n    nome_nutriente = Column(String(100), nullable=False)\n    unidade_medida = Column(String(50), nullable=False)\n    alimento_nutrientes = relationship(\"AlimentoNutriente\", back_populates=\"nutriente\")\nclass Registro_Diario(Base):\n    __tablename__ = 'registro_diario'\n    id_registro = Column(Integer, primary_key=True, autoincrement=True)\n    id_usuario = Column(Integer, nullable=False)",
        "detail": "Models",
        "documentation": {}
    },
    {
        "label": "Registro_Diario",
        "kind": 6,
        "importPath": "Models",
        "description": "Models",
        "peekOfCode": "class Registro_Diario(Base):\n    __tablename__ = 'registro_diario'\n    id_registro = Column(Integer, primary_key=True, autoincrement=True)\n    id_usuario = Column(Integer, nullable=False)\n    data = Column(String(10), nullable=False)  # Formato YYYY-MM-DDq\n    log = Column(String(500), nullable=False)\nclass Categoria_Alimento(Base):\n    __tablename__ = 'categoria_alimento'\n    nome_categoria = Column(String(100), nullable=False)\n    id_categoria = Column(Integer, primary_key=True, autoincrement=True)",
        "detail": "Models",
        "documentation": {}
    },
    {
        "label": "Categoria_Alimento",
        "kind": 6,
        "importPath": "Models",
        "description": "Models",
        "peekOfCode": "class Categoria_Alimento(Base):\n    __tablename__ = 'categoria_alimento'\n    nome_categoria = Column(String(100), nullable=False)\n    id_categoria = Column(Integer, primary_key=True, autoincrement=True)\n    descricao = Column(String(500), nullable=True)\n    alimento = relationship(\"Alimento\", back_populates=\"categoria\")\nclass Meta_Diaria(Base):\n    __tablename__ = 'meta_diaria'\n    id_usuario = Column(Integer, ForeignKey('usuario.id_usuario'), primary_key=True)\n    id_nutriente = Column(Integer, ForeignKey('nutriente.id_nutriente'), primary_key=True)",
        "detail": "Models",
        "documentation": {}
    },
    {
        "label": "Meta_Diaria",
        "kind": 6,
        "importPath": "Models",
        "description": "Models",
        "peekOfCode": "class Meta_Diaria(Base):\n    __tablename__ = 'meta_diaria'\n    id_usuario = Column(Integer, ForeignKey('usuario.id_usuario'), primary_key=True)\n    id_nutriente = Column(Integer, ForeignKey('nutriente.id_nutriente'), primary_key=True)\n    quantidade = Column(Integer, nullable=False)",
        "detail": "Models",
        "documentation": {}
    },
    {
        "label": "instalar_triggers",
        "kind": 2,
        "importPath": "setup_triggers",
        "description": "setup_triggers",
        "peekOfCode": "def instalar_triggers():\n    engine = create_engine('sqlite:///data.db')\n    triggers = [\n        # Trigger 1\n        \"\"\"\n        CREATE TRIGGER IF NOT EXISTS trg_log_calorias\n        AFTER INSERT ON refeicao_alimento\n        FOR EACH ROW\n        BEGIN\n            INSERT INTO registro_diario(id_usuario, data, log)",
        "detail": "setup_triggers",
        "documentation": {}
    }
]