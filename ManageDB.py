from DB import Engine, Base
import Models

def criar_tabelas():
    # Se alguma tabela n√£o existir, ela ser√° criada.
    # Se j√° existir, n√£o ser√° criada novamente.

    with Engine.connect() as connection: 
        # Estabelece uma conex√£o, dessa forma garante que ela seja fechada ap√≥s o uso.
        try:
            Base.metadata.create_all(connection)
            connection.commit()
            # Realiza a opera√ß√£o.
        except Exception as e:
            print(f'‚ùå Erro ao criar tabelas: {e}')
            raise

def apagar_tabelas():
    # Apaga todas as tabelas do banco de dados.

    with Engine.connect() as connection:
        try:
            Base.metadata.drop_all(connection)
            connection.commit()
            # Realiza a opera√ß√£o.
        except Exception as e:
            print(f'‚ùå Erro ao dropar tabelas: {e}')
            raise
        

def mostrar_menu():
    # Mostra o menu de op√ß√µes para o usu√°rio.

    print('-=-' * 20)
    print('Choose an option:')
    print('1 - Create Tables')
    print('2 - Drop Tables')
    print('3 - Exit')
    print('-=-' * 20)

if __name__ == "__main__":
    # Interface no Terminal para Desenvolvimento.
    # S√≥ pra facilitar criar e dropar tabelas no banco de dados.

    resposta = None

    print('-=-' * 20)
    print('Esse √© o m√≥dulo de teste do BD.')

    while resposta != 3:
        if resposta is None:
            mostrar_menu()
            resposta = int(input('Option: '))
            print('-=-' * 20)
        if resposta == 1:
            criar_tabelas()
            print('-=-' * 20)
            print('‚úÖ Tabelas criadas com sucesso.')
        elif resposta == 2:
            apagar_tabelas()
            print('-=-' * 20)
            print('‚úÖ Tabelas dropadas com sucesso.')
        elif resposta == 3:
            break
        else:
            print(resposta)
            print('‚ùå Op√ß√£o Invalida.')

        mostrar_menu()
        resposta = int(input('Option: '))
        print('-=-' * 20)

    print('üëã Saindo...')
